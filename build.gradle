buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
		
		maven {
			url "https://plugins.gradle.org/m2/"
		}
    }
}

repositories {
    mavenLocal()
    mavenCentral()
}

/* IDE projects generation */
apply plugin: 'eclipse'
apply plugin: 'idea'

/* java configuration */
apply plugin: 'java'

compileJava {
    sourceCompatibility = 1.7
    targetCompatibility = 1.7
}


/* gradle plugin development configuration */
apply plugin: 'java-gradle-plugin'

gradlePlugin {
    plugins {
        simplePlugin {
            id = pluginId
            implementationClass = 'com.dynatrace.diagnostics.automation.gradle.GradleEntryPoint'
        }
    }
}

/** maven plugin for pom creation, installation */
apply plugin: 'maven'
/** signing of maven artifacts */
apply plugin: 'signing'

/** signing should be done only if executed with uploadArchives task,
 * the 'required' property doesn't work so need to uncomment task to avoid failure in build*/
//signing {
//    required { gradle.taskGraph.hasTask("uploadArchives") }
//    sign configurations.archives
//}

/* compile and testing dependencies */
dependencies {
	compile gradleApi()
    compile 'com.dynatrace.sdk:server-rest-sdk:7.0.0'

    testCompile gradleApi()
    testCompile 'junit:junit:4.12'
}

task javadocJar(type: Jar) {
    classifier = 'javadoc'
    from javadoc
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

artifacts {
    archives javadocJar, sourcesJar
}

uploadArchives {
    repositories {
        mavenDeployer {
            beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

            repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                authentication(userName: ossrhUsername, password: ossrhPassword)
            }

            snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
                authentication(userName: ossrhUsername, password: ossrhPassword)
            }

            pom.project {
                name 'Dynatrace Gradle Plugin'
                packaging 'jar'
                description 'The automation plugin enables automation of Dynatrace by leveraging the REST interfaces of the Dynatrace AppMon Server'
                url 'https://github.com/Dynatrace/Dynatrace-Gradle-Plugin'

                scm {
                    connection 'scm:git:https://github.com/Dynatrace/Dynatrace-Gradle-Plugin.git'
                    developerConnection 'scm:git:https://github.com/Dynatrace/Dynatrace-Gradle-Plugin.git'
                    url 'https://github.com/Dynatrace/Dynatrace-Gradle-Plugin'
                }

                licenses {
                    license {
                        name 'dynaTrace BSD'
                        url 'https://raw.githubusercontent.com/Dynatrace/Dynatrace-Gradle-Plugin/master/LICENSE'
                    }
                }

                developers {
                    developer {
                        name 'Tomasz Chojnacki'
                        email 'tomasz.chojnacki@dynatrace.com'
                    }
                }
            }
        }
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '3.5'
}